# 1332. Remove Palindromic Subsequences
# Easy

# You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

# Return the minimum number of steps to make the given string empty.

# A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

# A string is called palindrome if is one that reads the same backward as well as forward.

 

# Example 1:

# Input: s = "ababa"
# Output: 1
# Explanation: s is already a palindrome, so its entirety can be removed in a single step.

# Example 2:

# Input: s = "abb"
# Output: 2
# Explanation: "abb" -> "bb" -> "". 
# Remove palindromic subsequence "a" then "bb".

# Example 3:

# Input: s = "baabb"
# Output: 2
# Explanation: "baabb" -> "b" -> "". 
# Remove palindromic subsequence "baab" then "b".

 

# Constraints:

#     1 <= s.length <= 1000
#     s[i] is either 'a' or 'b'.

# Accepted
# 126,059
# Submissions
# 165,274


class Solution(object):
    def removePalindromeSub(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0  # Если входная строка пуста, возвращаем 0, так как ничего удалять не нужно.
    
        # Проверяем, является ли входная строка уже палиндромом (состоит только из 'a' или только из 'b').
        # Если да, возвращаем 1, так как всю строку можно удалить в один шаг.
        if s == s[::-1]:
            return 1
    
        # Во всех остальных случаях возвращаем 2, так как первым шагом можно удалить все 'a', а вторым все 'b'.
        return 2





list_s = "ababa", "abb", "baabb"
for i in list_s:
   Solution.removePalindromeSub('Success', i)
